#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass elsarticle
\begin_preamble
\usepackage{algorithm}
\usepackage{algpseudocode}

% specify here the journal
\journal{Curso de <<Análisis de algoritmos>>, PUJ, Bogotá, Colombia - }

% use this if you need line numbers
\end_preamble
\use_default_options false
\begin_modules
theorems-std
\end_modules
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout BeginFrontmatter
\begin_inset Note Note
status open

\begin_layout Plain Layout
Keep this empty!
\end_layout

\end_inset


\end_layout

\begin_layout Title
Algoritmo para el juego de 
\begin_inset Quotes fld
\end_inset

Adivinar un número
\begin_inset Quotes frd
\end_inset

 con la estrategia de Dividir y vencer
\begin_inset Flex Titlenotemark
status open

\begin_layout Plain Layout
t1,t2
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\size normal
With 
\series bold
\size default

\backslash
tnoteref
\series default
\size normal
 you refer to the title footnotes.
\end_layout

\end_inset


\end_layout

\begin_layout Title footnote
Este documento presenta la escritura formal de un algoritmo para el juego
 de adivinar un número.
\begin_inset Argument 1
status open

\begin_layout Plain Layout
t1
\end_layout

\end_inset


\end_layout

\begin_layout Author
Nicolás Reyes Díaz
\begin_inset Argument 1
status open

\begin_layout Plain Layout
lfv
\end_layout

\end_inset


\end_layout

\begin_layout Email
na.reyesd@javeriana.edu.co
\end_layout

\begin_layout Address
Pontificia Universidad Javeriana, Bogotá, Colombia
\begin_inset Argument 1
status open

\begin_layout Plain Layout
lfv
\end_layout

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
fdt
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
En este documento se presenta la descripción formal del algoritmo para soluciona
r el juego de adivinar un número
\end_layout

\begin_layout Keywords
algoritmo, escritura formal, juego, adivinar, adivinador, pensador, dividir
 y vencer
\end_layout

\begin_layout EndFrontmatter
\begin_inset Note Note
status open

\begin_layout Plain Layout
Keep this empty!
\end_layout

\end_inset


\end_layout

\begin_layout Section
Análisis del problema
\end_layout

\begin_layout Standard
El juego de "adivinar un número" se juega entre dos personas: una de ellas
 piensa en un número natural y la otra intenta adivinarlo dando algunas
 posibles respuestas.
 En cada turno, el "adivinador" da un conjunto de n números y el "pensador"
 indica para cada número, si es mayor, menor o igual.
 Para este algoritmo, pensando en una implementación posterior en un lenguaje
 de programación, se considera al conjunto de los números naturales como:
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
N=\{1,2,3,4,5,6...\}
\]

\end_inset

Vistas las reglas del juego, se aclara que el algoritmo presentado a continuació
n tiene el propósito de tomar el rol de 
\begin_inset Quotes fld
\end_inset

adivinador
\begin_inset Quotes frd
\end_inset

, es decir, que éste hará la búsqueda del número que el 
\begin_inset Quotes fld
\end_inset

pensador
\begin_inset Quotes frd
\end_inset

 elija.
\end_layout

\begin_layout Section
Diseño del problema
\end_layout

\begin_layout Standard
El análisis anterior nos permite diseñar el problema: definir las entradas
 y salidas de un posible algoritmo de solución, que aún no está definido.
\end_layout

\begin_layout Enumerate

\emph on
\bar under
Entradas
\emph default
\bar default
: 
\begin_inset Formula $n$
\end_inset

, el número de posibles respuestas que puede presentar el 
\begin_inset Quotes fld
\end_inset

adivinador
\begin_inset Quotes frd
\end_inset

 por turno.
 
\begin_inset Formula ${\displaystyle k\in N}$
\end_inset

, el número elegido por el 
\begin_inset Quotes fld
\end_inset

pensador
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Enumerate

\emph on
\bar under
Salidas
\emph default
\bar default
: 
\begin_inset Formula ${\displaystyle k\in N}$
\end_inset

, el número elegido por el 
\begin_inset Quotes fld
\end_inset

pensador
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Section
Algoritmos de solución
\end_layout

\begin_layout Subsection
Algoritmo con la estrategia de 
\begin_inset Quotes fld
\end_inset

Dividir y Vencer
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Standard
Este algoritmo de solución se basa en la estrategia de 
\begin_inset Quotes fld
\end_inset

Dividir y Vencer
\begin_inset Quotes frd
\end_inset

 para solucionar el problema.
 Adicionalmente, se da por sentado que en la primerta iteración del algoritmo,
 el inf y sup serán 1 y ∞
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 respectivamente.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithm}[H]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Require
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Formula $a\in N,a>1,k\in N,inf<k<sup$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Procedure
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

GuessNumber
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Formula $o,k,inf,sup$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
If{
\end_layout

\end_inset


\begin_inset Formula $sup<inf$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
State
\backslash
Return
\end_layout

\end_inset


\begin_inset Formula $0$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
EndIf
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $max\leftarrow sup$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $min\leftarrow inf$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $cont\leftarrow min$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $p\leftarrow\lfloor(sup-inf)÷(a+1)\rfloor$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
For{
\end_layout

\end_inset


\begin_inset Formula $i\leftarrow1$
\end_inset

 to 
\begin_inset Formula $n+1$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

    
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $cont\leftarrow cont+p$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
If{
\end_layout

\end_inset


\begin_inset Formula $cont=k$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
State
\backslash
Return
\end_layout

\end_inset


\begin_inset Formula $k$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
ElsIf{
\end_layout

\end_inset


\begin_inset Formula $cont>k$
\end_inset

 and 
\begin_inset Formula $cont<max$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $max\leftarrow cont$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
ElsIf{
\end_layout

\end_inset


\begin_inset Formula $cont<k$
\end_inset

 and 
\begin_inset Formula $cont>max$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $min\leftarrow cont$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
EndIf
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
EndFor
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
State
\backslash
Return
\end_layout

\end_inset


\begin_inset Formula $\left[GuessNumber(a,k,min,max)\right]$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{algorithm}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Divide and conquer based algorithm to guess number
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Invariante
\end_layout

\begin_layout Standard
En cada llamado recursivo se tiene que el número buscado debe estar en el
 intervalo (min,max).
 También n y k son números que no varían a lo largo del algoritmo.
\end_layout

\begin_layout Subsubsection
Análisis de complejidad
\end_layout

\begin_layout Standard
Por inspección de código simple podemos llegar a que la complejidad temporal
 del algoritmo es 
\begin_inset Formula $T\left(n\right)=T(n/a+1)+O(a)$
\end_inset

.
 Representando a el número de oportunidades que tiene el adivinador.
 De esta forma, se comprobaron todos los casos del teorema maestro, hasta
 llegar al segundo, dando este desarrollo:
\end_layout

\begin_layout Standard
\begin_inset Formula $a=n^{log_{a+1}(1+\epsilon)}$
\end_inset


\end_layout

\begin_layout Standard
Solucionandolo en Maple:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename C:/Users/nicol/Downloads/maple ADA.png

\end_inset


\end_layout

\begin_layout Standard
Si tenemos en cuenta que 
\begin_inset Formula $a>1$
\end_inset

 y 
\begin_inset Formula $n\in N$
\end_inset

, e va a estar elevado a algo mayor que 0, por lo que 
\begin_inset Formula $\epsilon>0$
\end_inset


\end_layout

\begin_layout Standard
De esta forma, la complejidad del algoritmo por la tercera regla del teorema
 maestro será: 
\begin_inset Formula $\theta(a)$
\end_inset


\end_layout

\begin_layout Section
Notas de implementación
\end_layout

\begin_layout Standard
A la hora de hacer el programa, será recomendable tener una interfaz de
 usuario para indicar al algoritmo tanto el número a adivinar, como las
 respuestas permitidas por turno.
 También para darle la opción al usuario, con el rol del 
\begin_inset Quotes fld
\end_inset

pensador
\begin_inset Quotes frd
\end_inset

, de indicarle al algoritmo si ha acertado, si el número es menor o mayor.
 También pensando en que es un juego, se puede desarrollar un contador,
 para ver cuántos intentos le lleva al algoritmo adivinar el número.
\end_layout

\end_body
\end_document
